%{

#include <stdint.h>
#include "flexbison_harness.h"
#include "flexbison_archcasm_ast.h"

#define YYERROR_VERBOSE 1
%}

%code requires {
    namespace ArchCAsm {
        class ArchCAsmScanner;
    }
}

%skeleton "lalr1.cc"

%defines
%locations
%define api.namespace {ArchCAsm}
%define api.prefix {ArchCAsm}
%define parser_class_name {ArchCAsmParser}

%union {
    uint64_t ival;
    char *sval;
    float fval;
    double dval;
    astnode<ArchCAsmNodeType> *ast_node;
}

%parse-param { ArchCAsmScanner &scanner } { astnode<ArchCAsmNodeType> * root }

%code {
#include "flexbison_archcasm.h"
#undef yylex 
#define yylex scanner.ArchCAsmlex
}

%token<sval> WS CHARSEQ SPECIALCHAR OBRACKET CBRACKET PERCENT DOTS

%type<ast_node> asm_string atom_list atom placeholder modifier modifier_list modified_id id
%type<sval> ws_string char_string  

%define parse.assert
%define parse.error verbose

%%

asm_string : 
    atom_list { root->AddChild($1); };

atom_list : 
    atom_list atom { $$ = $1; $$->AddChild($2); } |
    %empty { $$ = CreateNode(ArchCAsmNodeType::List); }

atom :
    ws_string { $$ = CreateNode(ArchCAsmNodeType::Text, {CreateStrNode<ArchCAsmNodeType>($1)}); } |
    char_string { $$ = CreateNode(ArchCAsmNodeType::Text, {CreateStrNode<ArchCAsmNodeType>($1)}); } |
    placeholder { $$ = $1; }

ws_string :
    WS

char_string :
    CHARSEQ |
    SPECIALCHAR |
    OBRACKET |
    CBRACKET |
    DOTS;

placeholder :
    PERCENT modified_id { $$ = $2; } |
    PERCENT OBRACKET modified_id CBRACKET { $$ = $3; }

modified_id :
    id modifier_list { $$ = CreateNode(ArchCAsmNodeType::Placeholder, {$1, $2}); }

id :
    CHARSEQ { $$ = CreateStrNode<ArchCAsmNodeType>($1); }

modifier_list :
    modifier_list modifier { $$ = $1; $$->AddChild($2); } |
    %empty { $$ = CreateNode(ArchCAsmNodeType::List); }

modifier :
    DOTS { $$ = CreateStrNode<ArchCAsmNodeType>($1); }

%%

void ArchCAsm::ArchCAsmParser::error(const ArchCAsm::location &location, const std::string &error)
{
    std::cerr << location << ":" << error << std::endl;
    //fprintf(stderr, "%s:%u: %s\n", location.begin.filename, location.begin.line, error.c_str());
}
