%{

#include <iostream>
#include <stdint.h>

#define yyerminate() return ENDOFFILE

#include "flexbison_harness.h"
#include "genC.tabs.h"

%}

%option reentrant bison-bridge

%option noyywrap
%option yylineno

%x GENC_COMMENT
%x GENC_LINE_COMMENT
%x GENC_STRING

%%

"/*" BEGIN(GENC_COMMENT);
<GENC_COMMENT>"*/" BEGIN(INITIAL);
<GENC_COMMENT>. ;

"//" BEGIN(GENC_LINE_COMMENT);
<GENC_LINE_COMMENT>"\n" BEGIN(INITIAL);
<GENC_LINE_COMMENT>. ;

[ \t\r\n]+ {}
";" return SEMICOLON;
":" return GENC_COLON;

"typename" return GENC_TYPENAME;
"struct" return GENC_STRUCT;
"helper" return GENC_HELPER;
"execute" return GENC_EXECUTE;

"return" return GENC_RETURN;
"switch" return GENC_SWITCH;
"case" return GENC_CASE;
"default" return GENC_DEFAULT;
"continue" return GENC_CONTINUE;
"break" return GENC_BREAK;
"raise" return GENC_RAISE;
"do" return GENC_DO;
"for" return GENC_FOR;
"while" return GENC_WHILE;
"if" return GENC_IF;
"else" return GENC_ELSE;

"=" return EQUALS;
"&" return GENC_AMPERSAND;
"[" return GENC_OPEN_BRACKET;
"]" return GENC_CLOSE_BRACKET;
"(" return GENC_OPEN_PAREN;
")" return GENC_CLOSE_PAREN;
"{" return GENC_OPEN_BRACE;
"}" return GENC_CLOSE_BRACE;

"." return GENC_PERIOD;
":" return GENC_COLON;
"," return GENC_COMMA;
"-" return GENC_MINUS;
"+" return GENC_PLUS;
"~" return GENC_TILDE;
"!" return GENC_EXCLAMATION;

"uint8" { yylval->sval = strdup(yytext); return GENC_BASICTYPE; }
"uint16" { yylval->sval = strdup(yytext); return GENC_BASICTYPE; }
"uint32" { yylval->sval = strdup(yytext); return GENC_BASICTYPE; }
"uint64" { yylval->sval = strdup(yytext); return GENC_BASICTYPE; }
"uint128" { yylval->sval = strdup(yytext); return GENC_BASICTYPE; }
"sint8" { yylval->sval = strdup(yytext); return GENC_BASICTYPE; }
"sint16" { yylval->sval = strdup(yytext); return GENC_BASICTYPE; }
"sint32" { yylval->sval = strdup(yytext); return GENC_BASICTYPE; }
"sint64" { yylval->sval = strdup(yytext); return GENC_BASICTYPE; }
"sint128" { yylval->sval = strdup(yytext); return GENC_BASICTYPE; }
"float" { yylval->sval = strdup(yytext); return GENC_BASICTYPE; }
"double" { yylval->sval = strdup(yytext); return GENC_BASICTYPE; }
"longdouble" { yylval->sval = strdup(yytext); return GENC_BASICTYPE; }

[a-zA-Z_][a-zA-Z0-9_]+ { yylval->sval = strdup(yytext); return GENC_ID; }

[0-9]+ { yylval->ival = strtol(yytext, nullptr, 0); return GENC_INT_CONST; }
"0x"[0-9]+ { yylval->ival = strtol(yytext, nullptr, 0); return GENC_INT_CONST; }

%%
