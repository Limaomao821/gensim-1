%{

#include <stdint.h>
#include "flexbison_harness.h"
#include "flexbison_genc_ast.h"

#define YYERROR_VERBOSE 1
%}

%code requires {
    namespace GenC {
        class GenCScanner;
    }
}

%skeleton "lalr1.cc"

%defines
%locations
%define api.namespace {GenC}
%define parser_class_name {GenCParser}

%union {
    uint64_t ival;
    char *sval;
    float fval;
    double dval;
    astnode<GenCNodeType> *ast_node;
}

%parse-param { GenCScanner &scanner } { astnode<GenCNodeType> * root }

%code {
#include "flexbison_genc.h"
#undef yylex 
#define yylex scanner.yylex

#define CreateGenCNode CreateNode<GenCNodeType>
#define CreateGenCStrNode CreateStrNode<GenCNodeType>
#define CreateGenCIntNode CreateIntNode<GenCNodeType>

}

%define parse.assert
%define parse.error verbose

// AST Node Tokens
%token SEMICOLON
%token FILETOK HELPER BEHAVIOUR EXECUTE SYSTEM CONSTANT BODY 
%token OBRACE CBRACE

%token <sval> GENC_ID
%token GENC_CONST 

%token GENC_SCOPE_INTERNAL GENC_SCOPE_PRIVATE GENC_SCOPE_PUBLIC
%token GENC_ATTR_INLINE GENC_ATTR_NOINLINE GENC_ATTR_GLOBAL GENC_ATTR_EXPORT
%token GENC_STRUCT GENC_TYPENAME

%token DECL CAST BITCAST TYPEDEF PARAM PARAMS TYPE CASE DEFAULT BREAK CONTINUE RETURN RAISE 
%token WHILE DO FOR FOR_PRE FOR_CHECK FOR_POST IF SWITCH
%token IDX IDX_ELEM IDX_BITS MEMBER CALL
%token TERNARY 
%token PREFIX POSTFIX
%token VECTOR EXPR_STMT
%token GENC_INCREMENT GENC_DECREMENT

// debug tokens
%token <ast_node> GENC_DUMMY_HELPER
%token <ast_node> GENC_DUMMY_EXECUTE

%token <sval> GENC_INT_CONST
%token <sval> GENC_FLOAT_CONST
%token <sval> GENC_DOUBLE_CONST
%token <sval> GENC_BASICTYPE

%token GENC_EXECUTE
%token GENC_HELPER
%token <sval> GENC_HELPER_SCOPE
%token <sval> GENC_HELPER_ATTRIBUTE

%token GENC_OPEN_BRACKET
%token GENC_CLOSE_BRACKET
%token GENC_OPEN_BRACE
%token GENC_CLOSE_BRACE
%token GENC_OPEN_PAREN
%token GENC_CLOSE_PAREN

%token GENC_BREAK
%token GENC_CASE
%token GENC_CONTINUE
%token GENC_DEFAULT
%token GENC_DO
%token GENC_FOR
%token GENC_RAISE
%token GENC_RETURN
%token GENC_WHILE
%token GENC_IF
%token GENC_ELSE
%token GENC_SWITCH

%token GENC_EQUALS

%token GENC_PERIOD
%token GENC_COMMA
%token GENC_COLON
%token GENC_AMPERSAND
%token GENC_SHIFTLEFT
%token GENC_SHIFTRIGHT
%token GENC_ROTATELEFT
%token GENC_ROTATERIGHT
%token GENC_ASTERIX
%token GENC_FORWARDSLASH
%token GENC_PERCENT
%token GENC_CARET
%token GENC_PIPE
%token GENC_QUESTIONMARK
%token GENC_VCONCATENATE

%token GENC_COMPARE_EQUALITY
%token GENC_COMPARE_INEQUALITY
%token GENC_RIGHT_CHEVRON
%token GENC_COMPARE_GTE
%token GENC_LEFT_CHEVRON
%token GENC_COMPARE_LTE

%token GENC_LOGICAL_AND
%token GENC_LOGICAL_OR

%token GENC_PIPE_ASSIGN
%token GENC_AMPERSAND_ASSIGN
%token GENC_CARET_ASSIGN
%token GENC_PLUS_ASSIGN
%token GENC_MINUS_ASSIGN
%token GENC_ASTERIX_ASSIGN
%token GENC_DIVIDE_ASSIGN
%token GENC_PERCENT_ASSIGN
%token GENC_LEFTSHIFT_ASSIGN
%token GENC_RIGHTSHIFT_ASSIGN

%token <sval> GENC_BINARY_OPERATOR GENC_MINUS GENC_EXCLAMATION GENC_TILDE GENC_PLUS

%type <ast_node> definition_list typedef_definition constant_definition action_definition type execute_definition
%type <ast_node> full_type_definition base_type type_annotation_list type_annotation vector_type_annotation reference_type_annotation struct_type numeric_type typename_type
%type <ast_node> helper_definition helper_scope helper_param_list helper_param_list_nonempty helper_param helper_attribute_list helper_attribute
%type <ast_node> body statement statement_list iteration_statement selection_statement expression_statement flow_statement
%type <ast_node> constant_expr expression if_statement switch_statement declaration_expression assignment_expression

%type <ast_node> call_expression left_expression right_expression ternary_expression vector_expression vector_element_list cast_expression binary_expression variable_expression call_parameter_list call_parameter_list_nonempty unary_prefix_expression unary_postfix_operator

%type <ast_node> constant

%precedence "then"
%precedence GENC_ELSE

//%precedence GENC_EQUALS GENC_PIPE_ASSIGN GENC_PLUS_ASSIGN GENC_CARET_ASSIGN GENC_MINUS_ASSIGN GENC_DIVIDE_ASSIGN GENC_ASTERIX_ASSIGN GENC_PERCENT_ASSIGN GENC_AMPERSAND_ASSIGN GENC_LEFTSHIFT_ASSIGN GENC_RIGHTSHIFT_ASSIGN

%nonassoc GENC_QUESTIONMARK 

%left GENC_LOGICAL_AND GENC_LOGICAL_OR
%left GENC_COMPARE_EQUALITY GENC_COMPARE_INEQUALITY GENC_LEFT_CHEVRON GENC_COMPARE_GTE GENC_RIGHT_CHEVRON GENC_COMPARE_LTE

%right GENC_EXCLAMATION
%right GENC_TILDE
%right GENC_MINUS_UNARY
%right GENC_PLUS_UNARY

%nonassoc GENC_OPEN_BRACKET 
%nonassoc GENC_PERIOD
%left GENC_PLUS GENC_MINUS
%left GENC_FORWARDSLASH GENC_PERCENT GENC_ASTERIX
%left GENC_SHIFTLEFT GENC_SHIFTRIGHT GENC_ROTATELEFT GENC_ROTATERIGHT
%left GENC_PIPE
%left GENC_AMPERSAND
%left GENC_CARET

%precedence "cast"

%%

action_file : definition_list { root->AddChild($1); }

definition_list : 
    definition_list typedef_definition { $$ = $1; $$->AddChild($2); } |
    definition_list constant_definition { $$ = $1; $$->AddChild($2); } |
    definition_list action_definition { $$ = $1; $$->AddChild($2); } |
    %empty { $$ = CreateGenCNode(GenCNodeType::DefinitionList); }

typedef_definition :
    GENC_TYPENAME GENC_ID GENC_EQUALS type SEMICOLON { $$ = CreateGenCNode(GenCNodeType::Typename); $$->AddChild(CreateGenCStrNode($2)); $$->AddChild($4); }

constant_definition :
    GENC_CONST type GENC_ID GENC_EQUALS constant SEMICOLON { $$ = CreateGenCNode(GenCNodeType::Constant, {CreateGenCStrNode($3), $2, $5}); }

action_definition :
    helper_definition { $$ = $1; } |
    execute_definition { $$ = $1; }

helper_definition :
    helper_scope GENC_HELPER type GENC_ID GENC_OPEN_PAREN helper_param_list GENC_CLOSE_PAREN helper_attribute_list body 
        { $$ = CreateGenCNode(GenCNodeType::Helper); $$->AddChildren({$1, $3, CreateGenCStrNode($4), $6, $8, $9}); }

helper_scope :
    GENC_HELPER_SCOPE { $$ = CreateGenCNode(GenCNodeType::HelperScope); $$->AddChild(CreateGenCStrNode($1)); } |
    %empty { $$ = CreateGenCNode(GenCNodeType::HelperScope); $$->AddChild(CreateGenCStrNode("internal")); }

helper_param_list :
    helper_param_list_nonempty { $$ = $1; } |
    %empty { $$ = CreateGenCNode(GenCNodeType::HelperParamList); }
    
helper_param_list_nonempty :
    helper_param_list GENC_COMMA helper_param { $$ = $1; $$->AddChild($3); } |
    helper_param { $$ = CreateGenCNode(GenCNodeType::HelperParamList); $$->AddChild($1); }

helper_param :
    type GENC_ID { $$ = CreateGenCNode(GenCNodeType::HelperParam, {$1, CreateGenCStrNode($2)}); }

helper_attribute_list :
    helper_attribute_list helper_attribute { $$ = $1; $$->AddChild($2); } |
    %empty { $$ = CreateGenCNode(GenCNodeType::HelperAttributeList); }

helper_attribute :
    GENC_HELPER_ATTRIBUTE { $$ = CreateGenCStrNode($1); }

execute_definition :
    GENC_EXECUTE GENC_OPEN_PAREN GENC_ID GENC_CLOSE_PAREN body { $$ = CreateGenCNode(GenCNodeType::Execute, {CreateGenCStrNode($3), $5}); }

body :
    GENC_OPEN_BRACE statement_list GENC_CLOSE_BRACE { $$ = $2; }

statement_list :
    statement_list statement { $$ = $1; $$->AddChild($2); } |
    %empty { $$ = CreateGenCNode(GenCNodeType::Body); }

statement :
    body { $$ = $1; } |
    SEMICOLON { $$ = CreateGenCNode(GenCNodeType::Body); } |
    expression_statement SEMICOLON { $$ = $1; } |
    flow_statement { $$ = $1; } |
    iteration_statement { $$ = $1; } |
    selection_statement { $$ = $1; }

expression_statement : 
    assignment_expression { $$ = CreateGenCNode(GenCNodeType::ExprStmt, {$1}); } |
    expression { $$ = CreateGenCNode(GenCNodeType::ExprStmt, {$1}); }

declaration_expression : 
    type GENC_ID { $$ = CreateGenCNode(GenCNodeType::Declare, {$1, CreateGenCStrNode($2)}); }

assignment_expression :
    left_expression GENC_EQUALS right_expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("="), $1, $3}); } |
    left_expression GENC_PIPE_ASSIGN right_expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("|="), $1, $3}); } |
    left_expression GENC_CARET_ASSIGN right_expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("^="), $1, $3}); } |
    left_expression GENC_AMPERSAND_ASSIGN right_expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("&="), $1, $3}); } |
    left_expression GENC_PLUS_ASSIGN right_expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("+="), $1, $3}); } |
    left_expression GENC_MINUS_ASSIGN right_expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("-="), $1, $3}); } |
    left_expression GENC_DIVIDE_ASSIGN right_expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("/="), $1, $3}); } |
    left_expression GENC_PERCENT_ASSIGN right_expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("%="), $1, $3}); } |
    left_expression GENC_ASTERIX_ASSIGN right_expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("*="), $1, $3}); } |
    left_expression GENC_LEFTSHIFT_ASSIGN right_expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("<<="), $1, $3}); } |
    left_expression GENC_RIGHTSHIFT_ASSIGN right_expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode(">>="), $1, $3}); }

left_expression :
    variable_expression { $$ = $1; } |
    declaration_expression { $$ = $1; } |
    left_expression unary_postfix_operator { $$ = CreateGenCNode(GenCNodeType::Postfix, {$2, $1}); }

flow_statement : 
    GENC_CASE right_expression GENC_COLON body { $$ = CreateGenCNode(GenCNodeType::Case); $$->AddChildren({$2, $4}); } |
    GENC_DEFAULT GENC_COLON body { $$ = CreateGenCNode(GenCNodeType::Default, {$3}); } |
    GENC_BREAK SEMICOLON { $$ = CreateGenCNode(GenCNodeType::Break); } |
    GENC_CONTINUE SEMICOLON { $$ = CreateGenCNode(GenCNodeType::Continue);  } |
    GENC_RAISE SEMICOLON { $$ = CreateGenCNode(GenCNodeType::Raise);  } |
    GENC_RETURN SEMICOLON { $$ = CreateGenCNode(GenCNodeType::Return);  } |
    GENC_RETURN right_expression SEMICOLON { $$ = CreateGenCNode(GenCNodeType::Return, {$2});  }

iteration_statement :
    GENC_WHILE GENC_OPEN_PAREN expression GENC_CLOSE_PAREN statement { $$ = CreateGenCNode(GenCNodeType::While, {$3, $5}); } |
    GENC_DO statement GENC_WHILE GENC_OPEN_PAREN expression GENC_CLOSE_PAREN SEMICOLON { $$ = CreateGenCNode(GenCNodeType::Do, {$2, $5}); } |
    GENC_FOR GENC_OPEN_PAREN expression_statement SEMICOLON expression SEMICOLON expression_statement GENC_CLOSE_PAREN statement { $$ = CreateGenCNode(GenCNodeType::For, {$3, $5, $7, $9}); }

selection_statement :
    if_statement { $$ = $1; } |
    switch_statement {$$ = $1; }

if_statement :
    GENC_IF GENC_OPEN_PAREN expression_statement GENC_CLOSE_PAREN statement %prec "then" { $$ = CreateGenCNode(GenCNodeType::If, {$3, $5});  } |
    GENC_IF GENC_OPEN_PAREN expression_statement GENC_CLOSE_PAREN statement GENC_ELSE statement { $$ = CreateGenCNode(GenCNodeType::If, {$3, $5, $7});  }

switch_statement :
    GENC_SWITCH GENC_OPEN_PAREN expression GENC_CLOSE_PAREN body { $$ = CreateGenCNode(GenCNodeType::Switch, {$3, $5}); }

constant :
    GENC_INT_CONST { $$ = CreateGenCNode(GenCNodeType::INT, {CreateGenCStrNode($1)}); } |
    GENC_FLOAT_CONST { $$ = CreateGenCNode(GenCNodeType::FLOAT, {CreateGenCStrNode($1)}); } |
    GENC_DOUBLE_CONST { $$ = CreateGenCNode(GenCNodeType::DOUBLE, {CreateGenCStrNode($1)}); }

constant_expr:
    constant { $$ = $1; }

expression :
    call_expression { $$ = $1; } |
    cast_expression { $$ = $1; } |
    binary_expression { $$ = $1; } |
    unary_prefix_expression { $$ = $1; } %prec "prefix" |
    left_expression { $$ = $1; } | 
    constant_expr { $$ = $1; } |
    ternary_expression { $$ = $1; } |
    GENC_OPEN_PAREN expression GENC_CLOSE_PAREN { $$ = $2; }

right_expression :
    vector_expression { $$ = $1; } |
    expression { $$ = $1; }

vector_expression :
    GENC_OPEN_BRACE vector_element_list GENC_CLOSE_BRACE { $$ = $2; }

vector_element_list :
    vector_element_list GENC_COMMA expression { $$ = $1; $$->AddChild($3); } |
    expression { $$ = CreateGenCNode(GenCNodeType::Vector, {$1}); }

ternary_expression :
    expression GENC_QUESTIONMARK right_expression GENC_COLON right_expression { $$ = CreateGenCNode(GenCNodeType::Ternary, {$1, $3, $5}); }

cast_expression :
    GENC_OPEN_PAREN type GENC_CLOSE_PAREN expression %prec "cast" { $$ = CreateGenCNode(GenCNodeType::Cast, {$2, $4}); } |
    GENC_LEFT_CHEVRON type GENC_RIGHT_CHEVRON expression %prec "cast" { $$ = CreateGenCNode(GenCNodeType::BitCast, {$2, $4}); } 

unary_prefix_expression :
    GENC_INCREMENT left_expression { $$ = CreateGenCNode(GenCNodeType::Prefix, {CreateGenCStrNode("++"), $2}); }  |
    GENC_DECREMENT left_expression { $$ = CreateGenCNode(GenCNodeType::Prefix, {CreateGenCStrNode("--"), $2}); } |
    GENC_MINUS expression { $$ = CreateGenCNode(GenCNodeType::Prefix, {CreateGenCStrNode("-"), $2}); } %prec GENC_MINUS_UNARY |
    GENC_EXCLAMATION expression { $$ = CreateGenCNode(GenCNodeType::Prefix, {CreateGenCStrNode("!"), $2}); } |
    GENC_TILDE expression { $$ = CreateGenCNode(GenCNodeType::Prefix, {CreateGenCStrNode("~"), $2}); } |
    GENC_PLUS expression { $$ = $2; } %prec GENC_PLUS_UNARY

unary_postfix_operator :
    GENC_INCREMENT { $$ = CreateGenCStrNode("++"); } |
    GENC_DECREMENT { $$ = CreateGenCStrNode("++"); } |
    GENC_PERIOD GENC_ID { $$ = CreateGenCNode(GenCNodeType::Member, {CreateGenCStrNode($2)}); } %prec "member" |
    GENC_OPEN_BRACKET expression GENC_CLOSE_BRACKET { $$ = CreateGenCNode(GenCNodeType::VectorElement, {$2}); } %prec "postfix_brackets" |
    GENC_OPEN_BRACKET expression GENC_COLON expression GENC_CLOSE_BRACKET { $$ = CreateGenCNode(GenCNodeType::BitExtract, {$2, $4}); } %prec "postfix_brackets"

call_expression : 
    GENC_ID GENC_OPEN_PAREN call_parameter_list GENC_CLOSE_PAREN { $$ = CreateGenCNode(GenCNodeType::Call, {CreateGenCStrNode($1), $3}); }

call_parameter_list :
    %empty { $$ = CreateGenCNode(GenCNodeType::ParamList); } |
    call_parameter_list_nonempty { $$ = $1; }

call_parameter_list_nonempty :
    call_parameter_list_nonempty GENC_COMMA expression { $$ = $1; $$->AddChild($3); } |
    expression { $$ = CreateGenCNode(GenCNodeType::ParamList, {$1}); }

binary_expression : 
    expression GENC_PLUS expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("+"), $1, $3}); } |
    expression GENC_MINUS expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("-"), $1, $3}); } |
    expression GENC_ASTERIX expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("*"), $1, $3}); } |
    expression GENC_FORWARDSLASH expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("/"), $1, $3}); } |
    expression GENC_PERCENT expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("%"), $1, $3}); } |
    expression GENC_SHIFTLEFT expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("<<"), $1, $3}); } |
    expression GENC_SHIFTRIGHT expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode(">>"), $1, $3}); } |
    expression GENC_ROTATELEFT expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("<<<"), $1, $3}); } |
    expression GENC_ROTATERIGHT expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode(">>>"), $1, $3}); } |
    expression GENC_AMPERSAND expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("&"), $1, $3}); } |
    expression GENC_CARET expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("^"), $1, $3}); } |
    expression GENC_PIPE expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("|"), $1, $3}); } |
    
    expression GENC_LOGICAL_AND expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("&&"), $1, $3}); } |
    expression GENC_LOGICAL_OR expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("||"), $1, $3}); } |
    
    expression GENC_COMPARE_EQUALITY expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("=="), $1, $3}); } |
    expression GENC_COMPARE_INEQUALITY expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("!="), $1, $3}); } |
    expression GENC_RIGHT_CHEVRON expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode(">"), $1, $3}); } |
    expression GENC_COMPARE_GTE expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode(">="), $1, $3}); } | 
    expression GENC_LEFT_CHEVRON expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("<"), $1, $3}); } |
    expression GENC_COMPARE_LTE expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("<="), $1, $3}); } |
    
    expression GENC_VCONCATENATE expression { $$ = CreateGenCNode(GenCNodeType::Binary, {CreateGenCStrNode("::"), $1, $3}); } 

variable_expression :
    GENC_ID { $$ = CreateGenCNode(GenCNodeType::Variable, {CreateGenCStrNode($1)}); }
    
type :
    full_type_definition { $$ = $1; }

full_type_definition:
    base_type { $$ = CreateGenCNode(GenCNodeType::Type, {$1}); } |
    base_type type_annotation_list { $$ = CreateGenCNode(GenCNodeType::Type, {$1, $2}); }

type_annotation_list :
    type_annotation_list type_annotation { $$ = $1; $$->AddChild($2); } |
    type_annotation { $$ = CreateGenCNode(GenCNodeType::Annotation); $$->AddChild($1); }

type_annotation :
    vector_type_annotation |
    reference_type_annotation

vector_type_annotation:
    GENC_OPEN_BRACKET GENC_INT_CONST GENC_CLOSE_BRACKET { $$ = CreateGenCNode(GenCNodeType::Vector); $$->AddChild(CreateGenCStrNode($2)); }

reference_type_annotation:
    GENC_AMPERSAND { $$ = CreateGenCNode(GenCNodeType::Reference); }

base_type:
    struct_type { $$ = $1; } |
    numeric_type { $$ = $1; } |
    typename_type { $$ = $1; } 

struct_type:
    GENC_STRUCT GENC_ID { $$ = CreateGenCNode(GenCNodeType::Struct); $$->AddChild(CreateGenCStrNode($2)); }

numeric_type:
    GENC_BASICTYPE { $$ = CreateGenCNode(GenCNodeType::Type); $$->AddChild(CreateGenCStrNode($1)); }

typename_type:
    GENC_TYPENAME GENC_ID { $$ = CreateGenCNode(GenCNodeType::Typename); $$->AddChild(CreateGenCStrNode($2)); }


%%

void GenC::GenCParser::error(const GenC::location &location, const std::string &error)
{
    std::cerr << location << ":" << error << std::endl;
    //fprintf(stderr, "%s:%u: %s\n", location.begin.filename, location.begin.line, error.c_str());
}
